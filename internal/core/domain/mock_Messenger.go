// Code generated by mockery v2.40.2. DO NOT EDIT.

package domain

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockMessenger is an autogenerated mock type for the Messenger type
type MockMessenger struct {
	mock.Mock
}

type MockMessenger_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMessenger) EXPECT() *MockMessenger_Expecter {
	return &MockMessenger_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, newMessage
func (_m *MockMessenger) Create(ctx context.Context, newMessage *NewMessage) (*Message, error) {
	ret := _m.Called(ctx, newMessage)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NewMessage) (*Message, error)); ok {
		return rf(ctx, newMessage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NewMessage) *Message); ok {
		r0 = rf(ctx, newMessage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NewMessage) error); ok {
		r1 = rf(ctx, newMessage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessenger_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMessenger_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - newMessage *NewMessage
func (_e *MockMessenger_Expecter) Create(ctx interface{}, newMessage interface{}) *MockMessenger_Create_Call {
	return &MockMessenger_Create_Call{Call: _e.mock.On("Create", ctx, newMessage)}
}

func (_c *MockMessenger_Create_Call) Run(run func(ctx context.Context, newMessage *NewMessage)) *MockMessenger_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*NewMessage))
	})
	return _c
}

func (_c *MockMessenger_Create_Call) Return(_a0 *Message, _a1 error) *MockMessenger_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessenger_Create_Call) RunAndReturn(run func(context.Context, *NewMessage) (*Message, error)) *MockMessenger_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, limit, offset
func (_m *MockMessenger) List(ctx context.Context, limit int, offset int) ([]*Message, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*Message, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*Message); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessenger_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMessenger_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *MockMessenger_Expecter) List(ctx interface{}, limit interface{}, offset interface{}) *MockMessenger_List_Call {
	return &MockMessenger_List_Call{Call: _e.mock.On("List", ctx, limit, offset)}
}

func (_c *MockMessenger_List_Call) Run(run func(ctx context.Context, limit int, offset int)) *MockMessenger_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockMessenger_List_Call) Return(_a0 []*Message, _a1 error) *MockMessenger_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessenger_List_Call) RunAndReturn(run func(context.Context, int, int) ([]*Message, error)) *MockMessenger_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByTopic provides a mock function with given fields: ctx, topic, limit, offset
func (_m *MockMessenger) ListByTopic(ctx context.Context, topic string, limit int, offset int) ([]*Message, error) {
	ret := _m.Called(ctx, topic, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListByTopic")
	}

	var r0 []*Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*Message, error)); ok {
		return rf(ctx, topic, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*Message); ok {
		r0 = rf(ctx, topic, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, topic, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessenger_ListByTopic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByTopic'
type MockMessenger_ListByTopic_Call struct {
	*mock.Call
}

// ListByTopic is a helper method to define mock.On call
//   - ctx context.Context
//   - topic string
//   - limit int
//   - offset int
func (_e *MockMessenger_Expecter) ListByTopic(ctx interface{}, topic interface{}, limit interface{}, offset interface{}) *MockMessenger_ListByTopic_Call {
	return &MockMessenger_ListByTopic_Call{Call: _e.mock.On("ListByTopic", ctx, topic, limit, offset)}
}

func (_c *MockMessenger_ListByTopic_Call) Run(run func(ctx context.Context, topic string, limit int, offset int)) *MockMessenger_ListByTopic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockMessenger_ListByTopic_Call) Return(_a0 []*Message, _a1 error) *MockMessenger_ListByTopic_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessenger_ListByTopic_Call) RunAndReturn(run func(context.Context, string, int, int) ([]*Message, error)) *MockMessenger_ListByTopic_Call {
	_c.Call.Return(run)
	return _c
}

// ListTopics provides a mock function with given fields: ctx
func (_m *MockMessenger) ListTopics(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessenger_ListTopics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTopics'
type MockMessenger_ListTopics_Call struct {
	*mock.Call
}

// ListTopics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMessenger_Expecter) ListTopics(ctx interface{}) *MockMessenger_ListTopics_Call {
	return &MockMessenger_ListTopics_Call{Call: _e.mock.On("ListTopics", ctx)}
}

func (_c *MockMessenger_ListTopics_Call) Run(run func(ctx context.Context)) *MockMessenger_ListTopics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMessenger_ListTopics_Call) Return(_a0 []string, _a1 error) *MockMessenger_ListTopics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessenger_ListTopics_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockMessenger_ListTopics_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, UID
func (_m *MockMessenger) Read(ctx context.Context, UID uuid.UUID) (*Message, error) {
	ret := _m.Called(ctx, UID)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Message, error)); ok {
		return rf(ctx, UID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Message); ok {
		r0 = rf(ctx, UID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, UID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMessenger_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockMessenger_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - UID uuid.UUID
func (_e *MockMessenger_Expecter) Read(ctx interface{}, UID interface{}) *MockMessenger_Read_Call {
	return &MockMessenger_Read_Call{Call: _e.mock.On("Read", ctx, UID)}
}

func (_c *MockMessenger_Read_Call) Run(run func(ctx context.Context, UID uuid.UUID)) *MockMessenger_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockMessenger_Read_Call) Return(_a0 *Message, _a1 error) *MockMessenger_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMessenger_Read_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Message, error)) *MockMessenger_Read_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMessenger creates a new instance of MockMessenger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMessenger(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMessenger {
	mock := &MockMessenger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
