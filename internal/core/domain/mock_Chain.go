// Code generated by mockery v2.40.2. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockChain is an autogenerated mock type for the Chain type
type MockChain struct {
	mock.Mock
}

type MockChain_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChain) EXPECT() *MockChain_Expecter {
	return &MockChain_Expecter{mock: &_m.Mock}
}

// AddBlock provides a mock function with given fields: b
func (_m *MockChain) AddBlock(b *Block) (string, error) {
	ret := _m.Called(b)

	if len(ret) == 0 {
		panic("no return value specified for AddBlock")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*Block) (string, error)); ok {
		return rf(b)
	}
	if rf, ok := ret.Get(0).(func(*Block) string); ok {
		r0 = rf(b)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*Block) error); ok {
		r1 = rf(b)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChain_AddBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddBlock'
type MockChain_AddBlock_Call struct {
	*mock.Call
}

// AddBlock is a helper method to define mock.On call
//   - b *Block
func (_e *MockChain_Expecter) AddBlock(b interface{}) *MockChain_AddBlock_Call {
	return &MockChain_AddBlock_Call{Call: _e.mock.On("AddBlock", b)}
}

func (_c *MockChain_AddBlock_Call) Run(run func(b *Block)) *MockChain_AddBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Block))
	})
	return _c
}

func (_c *MockChain_AddBlock_Call) Return(_a0 string, _a1 error) *MockChain_AddBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChain_AddBlock_Call) RunAndReturn(run func(*Block) (string, error)) *MockChain_AddBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlock provides a mock function with given fields: key
func (_m *MockChain) GetBlock(key []byte) (*Block, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetBlock")
	}

	var r0 *Block
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*Block, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func([]byte) *Block); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Block)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChain_GetBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlock'
type MockChain_GetBlock_Call struct {
	*mock.Call
}

// GetBlock is a helper method to define mock.On call
//   - key []byte
func (_e *MockChain_Expecter) GetBlock(key interface{}) *MockChain_GetBlock_Call {
	return &MockChain_GetBlock_Call{Call: _e.mock.On("GetBlock", key)}
}

func (_c *MockChain_GetBlock_Call) Run(run func(key []byte)) *MockChain_GetBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockChain_GetBlock_Call) Return(_a0 *Block, _a1 error) *MockChain_GetBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChain_GetBlock_Call) RunAndReturn(run func([]byte) (*Block, error)) *MockChain_GetBlock_Call {
	_c.Call.Return(run)
	return _c
}

// InsertTx provides a mock function with given fields: tx
func (_m *MockChain) InsertTx(tx *Tx) (*Tx, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for InsertTx")
	}

	var r0 *Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(*Tx) (*Tx, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*Tx) *Tx); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(*Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChain_InsertTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertTx'
type MockChain_InsertTx_Call struct {
	*mock.Call
}

// InsertTx is a helper method to define mock.On call
//   - tx *Tx
func (_e *MockChain_Expecter) InsertTx(tx interface{}) *MockChain_InsertTx_Call {
	return &MockChain_InsertTx_Call{Call: _e.mock.On("InsertTx", tx)}
}

func (_c *MockChain_InsertTx_Call) Run(run func(tx *Tx)) *MockChain_InsertTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*Tx))
	})
	return _c
}

func (_c *MockChain_InsertTx_Call) Return(_a0 *Tx, _a1 error) *MockChain_InsertTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChain_InsertTx_Call) RunAndReturn(run func(*Tx) (*Tx, error)) *MockChain_InsertTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChain creates a new instance of MockChain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChain(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChain {
	mock := &MockChain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
