// Code generated by mockery v2.40.2. DO NOT EDIT.

package domain

import mock "github.com/stretchr/testify/mock"

// MockChain is an autogenerated mock type for the Chain type
type MockChain struct {
	mock.Mock
}

type MockChain_Expecter struct {
	mock *mock.Mock
}

func (_m *MockChain) EXPECT() *MockChain_Expecter {
	return &MockChain_Expecter{mock: &_m.Mock}
}

// AddTx provides a mock function with given fields: data, action, payload, signature
func (_m *MockChain) AddTx(data string, action string, payload []byte, signature string) (string, error) {
	ret := _m.Called(data, action, payload, signature)

	if len(ret) == 0 {
		panic("no return value specified for AddTx")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []byte, string) (string, error)); ok {
		return rf(data, action, payload, signature)
	}
	if rf, ok := ret.Get(0).(func(string, string, []byte, string) string); ok {
		r0 = rf(data, action, payload, signature)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, []byte, string) error); ok {
		r1 = rf(data, action, payload, signature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChain_AddTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTx'
type MockChain_AddTx_Call struct {
	*mock.Call
}

// AddTx is a helper method to define mock.On call
//   - data string
//   - action string
//   - payload []byte
//   - signature string
func (_e *MockChain_Expecter) AddTx(data interface{}, action interface{}, payload interface{}, signature interface{}) *MockChain_AddTx_Call {
	return &MockChain_AddTx_Call{Call: _e.mock.On("AddTx", data, action, payload, signature)}
}

func (_c *MockChain_AddTx_Call) Run(run func(data string, action string, payload []byte, signature string)) *MockChain_AddTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte), args[3].(string))
	})
	return _c
}

func (_c *MockChain_AddTx_Call) Return(_a0 string, _a1 error) *MockChain_AddTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChain_AddTx_Call) RunAndReturn(run func(string, string, []byte, string) (string, error)) *MockChain_AddTx_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransactions provides a mock function with given fields: limit, offset
func (_m *MockChain) ListTransactions(limit int, offset int) ([]*Tx, error) {
	ret := _m.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactions")
	}

	var r0 []*Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*Tx, error)); ok {
		return rf(limit, offset)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*Tx); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChain_ListTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactions'
type MockChain_ListTransactions_Call struct {
	*mock.Call
}

// ListTransactions is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *MockChain_Expecter) ListTransactions(limit interface{}, offset interface{}) *MockChain_ListTransactions_Call {
	return &MockChain_ListTransactions_Call{Call: _e.mock.On("ListTransactions", limit, offset)}
}

func (_c *MockChain_ListTransactions_Call) Run(run func(limit int, offset int)) *MockChain_ListTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockChain_ListTransactions_Call) Return(_a0 []*Tx, _a1 error) *MockChain_ListTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChain_ListTransactions_Call) RunAndReturn(run func(int, int) ([]*Tx, error)) *MockChain_ListTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// ListTransactionsByAction provides a mock function with given fields: input, limit, offset
func (_m *MockChain) ListTransactionsByAction(input string, limit int, offset int) ([]*Tx, error) {
	ret := _m.Called(input, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for ListTransactionsByAction")
	}

	var r0 []*Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*Tx, error)); ok {
		return rf(input, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*Tx); ok {
		r0 = rf(input, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(input, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChain_ListTransactionsByAction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTransactionsByAction'
type MockChain_ListTransactionsByAction_Call struct {
	*mock.Call
}

// ListTransactionsByAction is a helper method to define mock.On call
//   - input string
//   - limit int
//   - offset int
func (_e *MockChain_Expecter) ListTransactionsByAction(input interface{}, limit interface{}, offset interface{}) *MockChain_ListTransactionsByAction_Call {
	return &MockChain_ListTransactionsByAction_Call{Call: _e.mock.On("ListTransactionsByAction", input, limit, offset)}
}

func (_c *MockChain_ListTransactionsByAction_Call) Run(run func(input string, limit int, offset int)) *MockChain_ListTransactionsByAction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockChain_ListTransactionsByAction_Call) Return(_a0 []*Tx, _a1 error) *MockChain_ListTransactionsByAction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChain_ListTransactionsByAction_Call) RunAndReturn(run func(string, int, int) ([]*Tx, error)) *MockChain_ListTransactionsByAction_Call {
	_c.Call.Return(run)
	return _c
}

// ReadTx provides a mock function with given fields: hash
func (_m *MockChain) ReadTx(hash string) (*Tx, error) {
	ret := _m.Called(hash)

	if len(ret) == 0 {
		panic("no return value specified for ReadTx")
	}

	var r0 *Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*Tx, error)); ok {
		return rf(hash)
	}
	if rf, ok := ret.Get(0).(func(string) *Tx); ok {
		r0 = rf(hash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockChain_ReadTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadTx'
type MockChain_ReadTx_Call struct {
	*mock.Call
}

// ReadTx is a helper method to define mock.On call
//   - hash string
func (_e *MockChain_Expecter) ReadTx(hash interface{}) *MockChain_ReadTx_Call {
	return &MockChain_ReadTx_Call{Call: _e.mock.On("ReadTx", hash)}
}

func (_c *MockChain_ReadTx_Call) Run(run func(hash string)) *MockChain_ReadTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockChain_ReadTx_Call) Return(_a0 *Tx, _a1 error) *MockChain_ReadTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockChain_ReadTx_Call) RunAndReturn(run func(string) (*Tx, error)) *MockChain_ReadTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockChain creates a new instance of MockChain. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockChain(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockChain {
	mock := &MockChain{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
