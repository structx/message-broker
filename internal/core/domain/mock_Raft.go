// Code generated by mockery v2.42.3. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	messagebroker "github.com/trevatk/mora/pkg/messagebroker"
)

// MockRaft is an autogenerated mock type for the Raft type
type MockRaft struct {
	mock.Mock
}

type MockRaft_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRaft) EXPECT() *MockRaft_Expecter {
	return &MockRaft_Expecter{mock: &_m.Mock}
}

// GetStartParams provides a mock function with given fields:
func (_m *MockRaft) GetStartParams() *GrpcStartParams {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStartParams")
	}

	var r0 *GrpcStartParams
	if rf, ok := ret.Get(0).(func() *GrpcStartParams); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GrpcStartParams)
		}
	}

	return r0
}

// MockRaft_GetStartParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStartParams'
type MockRaft_GetStartParams_Call struct {
	*mock.Call
}

// GetStartParams is a helper method to define mock.On call
func (_e *MockRaft_Expecter) GetStartParams() *MockRaft_GetStartParams_Call {
	return &MockRaft_GetStartParams_Call{Call: _e.mock.On("GetStartParams")}
}

func (_c *MockRaft_GetStartParams_Call) Run(run func()) *MockRaft_GetStartParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaft_GetStartParams_Call) Return(_a0 *GrpcStartParams) *MockRaft_GetStartParams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaft_GetStartParams_Call) RunAndReturn(run func() *GrpcStartParams) *MockRaft_GetStartParams_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function with given fields:
func (_m *MockRaft) GetState() RaftState {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 RaftState
	if rf, ok := ret.Get(0).(func() RaftState); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(RaftState)
	}

	return r0
}

// MockRaft_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockRaft_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
func (_e *MockRaft_Expecter) GetState() *MockRaft_GetState_Call {
	return &MockRaft_GetState_Call{Call: _e.mock.On("GetState")}
}

func (_c *MockRaft_GetState_Call) Run(run func()) *MockRaft_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRaft_GetState_Call) Return(_a0 RaftState) *MockRaft_GetState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaft_GetState_Call) RunAndReturn(run func() RaftState) *MockRaft_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// Join provides a mock function with given fields: _a0, _a1
func (_m *MockRaft) Join(_a0 context.Context, _a1 *NewMember) (*Member, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Join")
	}

	var r0 *Member
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *NewMember) (*Member, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *NewMember) *Member); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Member)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *NewMember) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRaft_Join_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Join'
type MockRaft_Join_Call struct {
	*mock.Call
}

// Join is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *NewMember
func (_e *MockRaft_Expecter) Join(_a0 interface{}, _a1 interface{}) *MockRaft_Join_Call {
	return &MockRaft_Join_Call{Call: _e.mock.On("Join", _a0, _a1)}
}

func (_c *MockRaft_Join_Call) Run(run func(_a0 context.Context, _a1 *NewMember)) *MockRaft_Join_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*NewMember))
	})
	return _c
}

func (_c *MockRaft_Join_Call) Return(_a0 *Member, _a1 error) *MockRaft_Join_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRaft_Join_Call) RunAndReturn(run func(context.Context, *NewMember) (*Member, error)) *MockRaft_Join_Call {
	_c.Call.Return(run)
	return _c
}

// Notify provides a mock function with given fields: ctx, msg
func (_m *MockRaft) Notify(ctx context.Context, msg messagebroker.Msg) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Notify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, messagebroker.Msg) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRaft_Notify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Notify'
type MockRaft_Notify_Call struct {
	*mock.Call
}

// Notify is a helper method to define mock.On call
//   - ctx context.Context
//   - msg messagebroker.Msg
func (_e *MockRaft_Expecter) Notify(ctx interface{}, msg interface{}) *MockRaft_Notify_Call {
	return &MockRaft_Notify_Call{Call: _e.mock.On("Notify", ctx, msg)}
}

func (_c *MockRaft_Notify_Call) Run(run func(ctx context.Context, msg messagebroker.Msg)) *MockRaft_Notify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(messagebroker.Msg))
	})
	return _c
}

func (_c *MockRaft_Notify_Call) Return(_a0 error) *MockRaft_Notify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRaft_Notify_Call) RunAndReturn(run func(context.Context, messagebroker.Msg) error) *MockRaft_Notify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRaft creates a new instance of MockRaft. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRaft(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRaft {
	mock := &MockRaft{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
